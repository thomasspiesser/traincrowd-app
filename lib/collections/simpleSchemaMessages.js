SimpleSchema.messages({
  required: "[label] ist erforderlich",
  minString: "[label] muss mindestens [min] Buchstaben lang sein",
  maxString: "[label] darf nicht länger als [max] Buchstaben sein",
  minNumber: "[label] muss mindestens [min] sein",
  maxNumber: "[label] darf höchstens [max] sein",
  minDate: "[label] muss am oder nach [min] sein",
  maxDate: "[label] darf nicht nach [max] sein",
  badDate: "[label] ist kein gültiges Datum",
  minCount: "[label] muss mindestens [minCount] Wert(e) haben",
  maxCount: "[label] darf nicht mehr als [maxCount] Wert(e) haben",
  noDecimal: "[label] muss eine ganze Zahl sein",
  notAllowed: "[value] ist ein nicht erlaubter Wert",
  expectedString: "[label] muss ein String sein",
  expectedNumber: "[label] muss eine Nummer sein",
  expectedBoolean: "[label] muss ein Boolscher Wert sein",
  expectedArray: "[label] muss eine Liste sein",
  expectedObject: "[label] muss ein Objekt sein",
  expectedConstructor: "[label] muss vom Typ [type] sein",
  regEx: [
    {msg: "[label] failed regular expression validation"},
    {exp: SimpleSchema.RegEx.Email, msg: "[label] muss eine valide Email Adresse sein"},
    {exp: SimpleSchema.RegEx.WeakEmail, msg: "[label] muss eine valide Email Adresse sein"},
    {exp: SimpleSchema.RegEx.Domain, msg: "[label] muss eine valide Domain sein"},
    {exp: SimpleSchema.RegEx.WeakDomain, msg: "[label] muss eine valide Domain sein"},
    {exp: SimpleSchema.RegEx.IP, msg: "[label] muss eine valide IPv4 oder IPv6 Adresse sein"},
    {exp: SimpleSchema.RegEx.IPv4, msg: "[label] muss eine valide IPv4 Adresse sein"},
    {exp: SimpleSchema.RegEx.IPv6, msg: "[label] muss eine valide IPv6 Adresse sein"},
    {exp: SimpleSchema.RegEx.Url, msg: "[label] muss eine valide URL sein"},
    {exp: SimpleSchema.RegEx.Id, msg: "[label] muss eine valide alphanumerische ID sein"}
  ],
  keyNotInSchema: "[key] ist durch das DB-Schema nicht erlaubt"
});

// SimpleSchema.messages({
//   required: "[label] is required",
//   minString: "[label] must be at least [min] characters",
//   maxString: "[label] cannot exceed [max] characters",
//   minNumber: "[label] must be at least [min]",
//   maxNumber: "[label] cannot exceed [max]",
//   minDate: "[label] must be on or after [min]",
//   maxDate: "[label] cannot be after [max]",
//   badDate: "[label] is not a valid date",
//   minCount: "You must specify at least [minCount] value(s)",
//   maxCount: "You cannot specify more than [maxCount] values",
//   noDecimal: "[label] must be an integer",
//   notAllowed: "[value] is not an allowed value",
//   expectedString: "[label] must be a string",
//   expectedNumber: "[label] must be a number",
//   expectedBoolean: "[label] must be a boolean",
//   expectedArray: "[label] must be an array",
//   expectedObject: "[label] must be an object",
//   expectedConstructor: "[label] must be a [type]",
//   regEx: [
//     {msg: "[label] failed regular expression validation"},
//     {exp: SimpleSchema.RegEx.Email, msg: "[label] must be a valid e-mail address"},
//     {exp: SimpleSchema.RegEx.WeakEmail, msg: "[label] must be a valid e-mail address"},
//     {exp: SimpleSchema.RegEx.Domain, msg: "[label] must be a valid domain"},
//     {exp: SimpleSchema.RegEx.WeakDomain, msg: "[label] must be a valid domain"},
//     {exp: SimpleSchema.RegEx.IP, msg: "[label] must be a valid IPv4 or IPv6 address"},
//     {exp: SimpleSchema.RegEx.IPv4, msg: "[label] must be a valid IPv4 address"},
//     {exp: SimpleSchema.RegEx.IPv6, msg: "[label] must be a valid IPv6 address"},
//     {exp: SimpleSchema.RegEx.Url, msg: "[label] must be a valid URL"},
//     {exp: SimpleSchema.RegEx.Id, msg: "[label] must be a valid alphanumeric ID"}
//   ],
//   keyNotInSchema: "[key] is not allowed by the schema"
// });